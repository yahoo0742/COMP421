# -*- coding: utf-8 -*-
"""COMP421_assignment01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_cg613Q1TI6GumALAr3C7UTdhC-JrySI
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
print(tf.__version__)
from tensorflow import keras
import numpy as np
import datetime
from matplotlib import pyplot as plt
from tensorflow.keras.utils import  plot_model

# %reload_ext tensorboard
import scprep
!rm -rf ./logs/

EPOCHS = 500
TRAIN_BUF = 1000
TEST_BUF = 300
BATCH_SIZE = 100

def gendata(instancenum):
  featuredim = 3 # x, y, z
  shape = [instancenum, featuredim]
  mean = 0
  stddev = 1
  xyznormaldistributedinstances = tf.random.normal(shape, mean, stddev, tf.float32, seed=1) # [[x1,y1,z1], [x2,y2,z2], ...]
  # radius = (x*x + y*y +z*z) ^ (1/2)
  xxyyzz = np.square(xyznormaldistributedinstances) # [[x1*x1,y1*y1,z1*z1], [x2*x2,y2*y2,z2*z2], ... ]
  xxyyzzsum = np.sum(xxyyzz, 1) # [x1y1z1_sum, x2y2z2_sum, ...]
  radiusofinstances = np.sqrt(xxyyzzsum) # radius = xyz_sum^(1/2), [x1y1z1_sum^(1/2), x2y2z2_sum^(1/2), ...]

  # normalize (length = 1) all data
  invradius = np.divide(1, radiusofinstances)
  normalizedinstances = xyznormaldistributedinstances * invradius[:,None]
  return normalizedinstances

traininstances = gendata(TRAIN_BUF)
testinstances = gendata(TEST_BUF)

scprep.plot.rotate_scatter3d(traininstances, c=traininstances[:, 0], title="Generated 3D data")

model = tf.keras.Sequential()

# 2 hidden layers and 1 output layer, the input dimension is 3
model.add(tf.keras.layers.Dense(units=10, activation='relu', input_shape=(3,)))
model.add(tf.keras.layers.Dense(units=10, activation='relu'))
model.add(tf.keras.layers.Dense(units=3, activation='linear'))

model.compile(loss='mean_squared_error',
              optimizer=tf.keras.optimizers.Adam(1e-3),
              metrics=['accuracy'])

history = model.fit(traininstances, traininstances, BATCH_SIZE, EPOCHS, 0, None, 0.3, traininstances, True)
#print(history.history.keys())
score = model.evaluate(testinstances, testinstances, BATCH_SIZE)

print('Test loss: ', score[0])
model.summary()
current_time = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
path = 'logs/normaldistributed3ddata/' + current_time + '/model'
model.save_weights(path)

# visualize history for accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# visualize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plot_model(model,'model.png', True, True, 'LR', True)